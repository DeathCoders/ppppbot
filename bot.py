from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import sqlite3
from config import TOKEN, bot_name
from keyboard import *
import asyncio
import datetime

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

db = sqlite3.connect('database.db')
sql = db.cursor()

#–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

sql.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INT,
            psevdonym TEXT,
            level TEXT,
            balance FLOAT ,
            count_refs INT,
            unactive_ref INT,
            is_admin INT,
            is_support INT,
            last_withdrawal_date TEXT ,
            deposit_date TEXT,
            deposit FLOAT,
            id_refferer TEXT
            )''')
db.commit()


# ===============================================================#

#–ö–ª–∞—Å—ã –¥–ª—è –§–ú–° –ü–†–û–ö–°–ò –°–¢–ï–ô–¢


class FSMpsevdonim(StatesGroup):
    psevdonim = State()


class WithdrawalState(StatesGroup):
    amount = State()
    withdrawal_method = State()

class GivebalanceState(StatesGroup):
    user_id = State()
    sum = State()

class TakebalanceState(StatesGroup):
    user_id = State()
    sum = State()

class ChangebalanceState(StatesGroup):
    user_id = State()
    sum = State()

class MakeadminState(StatesGroup):
    user_id = State()

class TakeadminState(StatesGroup):
    user_id = State()

# ===============================================================#
    
#–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å—å

async def check_subscription(user_id: int, channel_id: str) -> bool:
    try:
        chat_member = await bot.get_chat_member(channel_id, user_id)
        if chat_member["status"] != "left":
            return True
        else:
            return False
    except Exception as e:
        print(f"Error checking subscription: {e}")
        return True

# ===============================================================#
    


@dp.message_handler(commands=['start'], state=None)
async def process_start_command(message: types.Message):
    user_id = message.from_user.id
    #–û—Ç—Ä–∏–º–∞–Ω–Ω—è –†–µ—Ñ—Ñ–µ—Ä–µ—Ä –∞–π–¥—ñ
    try:
        global referer_id
        referer_id = str(message.get_args())
        if (referer_id == user_id):
            referer_id = ''
        else:
            referer_id = str(message.text[7:])
        print(referer_id)
    except:
        await message.answer("–†–µ—Ñ–µ—Ä–µ—Ä —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
    # ===============================================================#
    channel_id = '@dispac09' # –ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ######################################################################################

    #–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å—å —ñ –Ω–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö
    sql.execute(f"SELECT * FROM users WHERE user_id = '{user_id}'")
    if sql.fetchone() is None and await check_subscription(user_id, channel_id) == False:
        await message.reply("Unicorn Team –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç! –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:",
                            reply_markup=inlbtn)
        await message.reply("–ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!", reply_markup=btn)

    sql.execute(f"SELECT * FROM users WHERE user_id = '{user_id}'")
    if sql.fetchone() != None and await check_subscription(user_id, channel_id) == False:
        await message.reply("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥–ø–µ—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:", reply_markup=inlbtn)
        await message.reply("–ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!", reply_markup=btn)

    sql.execute(f"SELECT * FROM users WHERE user_id = '{user_id}'")
    if sql.fetchone() is None and await check_subscription(user_id, channel_id) == True:
        await FSMpsevdonim.psevdonim.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞")
        sql.execute(f"SELECT * FROM users WHERE user_id = '{user_id}'")
        if sql.fetchone() is None:
            @dp.message_handler(state=FSMpsevdonim.psevdonim)
            async def load_psevdonim(message: types.Message, state: FSMContext):
                async with state.proxy() as data:
                    data['psevdonim'] = message.text
                async with state.proxy() as data:
                    sql.execute(f"INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)",
                                (message.from_user.id, data['psevdonim'], "mini_horse", 0, 0, 0, 0, 0, 0, 0, 0,referer_id))
                    db.commit()
                    await state.finish()
                    await message.reply("–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–æ–±–∞–≤–ª–µ–Ω, –≤—ã –≤ –º–µ–Ω—é", reply_markup=menu_btn)
        for count in sql.execute(f"SELECT unactive_ref FROM users WHERE user_id = '{referer_id}'"):
            print(count[0])
            sql.execute(f"UPDATE users SET unactive_ref = ? WHERE user_id = ?", (int(count[0]) + 1, referer_id))
            db.commit()

    sql.execute(f"SELECT * FROM users WHERE user_id = '{user_id}'")
    if sql.fetchone() != None and await check_subscription(user_id, channel_id) == True:
        await message.reply("–í—ã –≤ –º–µ–Ω—é", reply_markup=menu_btn)
        user_id = message.from_user.id

    # ===============================================================#


#–ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞ –ø—ñ–¥–ø–∏—Å–∫—É
@dp.message_handler(lambda message: message.text == '–ü–æ–¥–ø–∏—Å–∞–ª—Å—è')
async def Subscribe_checking(message: types.Message):
    user_id = message.from_user.id
    channel_id = '@dispac09'

    sql.execute(f"SELECT * FROM users WHERE user_id = '{user_id}'")
    if sql.fetchone() is None:
        if await check_subscription(user_id, channel_id) == True:
            await FSMpsevdonim.psevdonim.set()
            sql.execute(f"SELECT * FROM users WHERE user_id = '{user_id}'")
            if sql.fetchone() is None:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞")

                @dp.message_handler(state=FSMpsevdonim.psevdonim)
                async def load_psevdonim(message: types.Message, state: FSMContext):
                    async with state.proxy() as data:
                        data['psevdonim'] = message.text
                    async with state.proxy() as data:
                        sql.execute(f"INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                    (message.from_user.id, data['psevdonim'], "mini_horse", 0, 0, 0, 0, 0, 0, 0, 0,referer_id))
                        db.commit()
                        await state.finish()
                        await message.reply("–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –≤—ã –≤ –º–µ–Ω—é", reply_markup=menu_btn)
            for count in sql.execute(f"SELECT unactive_ref FROM users WHERE user_id = '{referer_id}'"):
                sql.execute(f"UPDATE users SET unactive_ref = ? WHERE user_id = ?", (int(count[0]) + 1, referer_id))
                db.commit()
        else:
            await message.reply("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª")
    else:
        await message.reply("–Ø –∑–Ω–∞—é, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", reply_markup=menu_btn)

# ===============================================================#


#–î—Ä—É–≥–æ—Ä—è–¥–Ω—ñ –∫–Ω–æ–ø–∫–∏
        
@dp.message_handler(lambda message: message.text == '–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
async def SL(message: types.Message):
    await message.answer("–ß–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º: @sbu_uat", reply_markup= menu_btn)


@dp.message_handler(lambda message: message.text == '–û—Ç–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª')
async def OC(message: types.Message):
    await message.answer("C—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/+5pdycvl8iWg5NDUy", reply_markup= menu_btn)

# ===============================================================#

@dp.message_handler(lambda message: message.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def LK(message: types.Message):
    user_id = message.from_user.id
    for i in sql.execute(f"SELECT * FROM users WHERE user_id = {user_id}"):
        global column
        column = i
    await message.answer(
        str(f"üè†–ö–∞–±–∏–Ω–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ {column[1]}\nID: {column[0]}\nü¶Ñ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ–º–æ–π, {column[1]}!\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {column[2]}\nüßû –ë–æ—Å—Å, –∑–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:\n –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å\n –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∞—Ä–º–∏—é –í–∞—à–∏—Ö –ï–¥–∏–Ω–æ—Ä–æ–≥–æ–≤"),
        reply_markup=LK_btn)

#–î–ª—è –õ–ö
        
@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥')
async def SL(message: types.Message):
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",reply_markup=menu_btn)


@dp.message_handler(lambda message: message.text == '–£—Ä–æ–≤–Ω–∏')
async def levels(message: types.Message):
    user_id = message.from_user.id
    for i in sql.execute(f"SELECT * FROM users WHERE user_id = {user_id}"):
        global column
        column = i
    await message.answer(
        f"ü¶Ñ–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {column[2]}\n–ü—Ä–æ—Ü–µ–Ω—Ç —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –∞—Ä–º–∏–∏: #–¢—É—Ç —â–æ—Å—å –º–∞—î –±—É—Ç–∏\n–ü—Ä–æ—Ü–µ–Ω—Ç —Å –º–∞—Ä–∂–∏ –∞—Ä–º–∏–∏: #–¢—É—Ç —â–æ—Å—å –º–∞—î –±—É—Ç–∏\n–î–Ω–µ–≤–Ω–∞—è –º–∞—Ä–∂–∞: #–¢—É—Ç —â–æ—Å—å –º–∞—î –±—É—Ç–∏\n–•–æ–ª–¥ –¥–µ–ø–æ–∑–∏—Ç–∞: #–¢—É—Ç —â–æ—Å—å –º–∞—î –±—É—Ç–∏\n–ö–æ–ª-–≤–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤: #–¢—É—Ç —â–æ—Å—å –º–∞—î –±—É—Ç–∏",
        reply_markup=level_btn)


@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É')
async def BTM(message: types.Message):
    user_id = message.from_user.id
    for i in sql.execute(f"SELECT * FROM users WHERE user_id = {user_id}"):
        global column
        column = i
    await message.answer(str(f"üè†–ö–∞–±–∏–Ω–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ {column[1]}\nID: {column[0]}\nü¶Ñ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ–º–æ–π, {column[1]}!\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {column[2]}\nüßû –ë–æ—Å—Å, –∑–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:\n –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å\n –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∞—Ä–º–∏—é –í–∞—à–∏—Ö –ï–¥–∏–Ω–æ—Ä–æ–≥–æ–≤"),
        reply_markup=LK_btn)


@dp.message_handler(lambda message: message.text == '–ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å')
async def up_level(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å", reply_markup=btn_levelUP)


@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥ –∫ —É—Ä–æ–≤–Ω—è–º')
async def back_up_level(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å", reply_markup=btn_levelUP)

async def notify_admins_and_supports(user_id, user_name, level):
    admins = sql.execute("SELECT user_id FROM users WHERE is_admin = 1").fetchall()
    supports = sql.execute("SELECT user_id FROM users WHERE is_support = 1").fetchall()
    recipient_ids = [admin[0] for admin in admins] + [support[0] for support in supports]

    message_text = f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç:\n@{user_name}\n{user_id}\n–£—Ä–æ–≤–µ–Ω—å {level}"

    for recipient_id in recipient_ids:
        await bot.send_message(chat_id=recipient_id, text=message_text)

# ===============================================================#
        
#–ö–ù–û–ü–ö–ò –î–õ–Ø –†–Ü–í–ù–Ü–í, + –ü–ï–†–ï–°–ò–õ–ê–ù–ù–Ø –°–ê–ü–û–û–†–¢–ê–ú

@dp.message_handler(lambda message: message.text == 'Pony')
async def level_pony(message: types.Message):
    await message.answer(
        "ü¶Ñ–£—Ä–æ–≤–µ–Ω—å Pony\n–î–µ–ø–æ–∑–∏—Ç: –æ—Ç 50 –¥–æ 500$\n–ü—Ä–æ—Ü–µ–Ω—Ç —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –∞—Ä–º–∏–∏: 1.2% - –¥–æ 3—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n1.5% - –æ—Ç 3—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n–ü—Ä–æ—Ü–µ–Ω—Ç —Å –º–∞—Ä–∂–∏ –∞—Ä–º–∏–∏: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n–î–Ω–µ–≤–Ω–∞—è –º–∞—Ä–∂–∞: 1,2% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n–•–æ–ª–¥ –¥–µ–ø–æ–∑–∏—Ç–∞: 40 –¥–Ω–µ–π\n–ö–æ–ª-–≤–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤: 2",
        reply_markup=btn_pony_dep)

@dp.message_handler(lambda message: message.text == '–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å Pony')
async def level_MU(message: types.Message):
    await notify_admins_and_supports(message.from_user.id, message.from_user.username, "Pony")
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤—ã –≤ –º–µ–Ω—é", reply_markup=LK_btn)

@dp.message_handler(lambda message: message.text == 'Horse')
async def level_horse(message: types.Message):
    await message.answer(
        "ü¶Ñ–£—Ä–æ–≤–µ–Ω—å Horse\n–î–µ–ø–æ–∑–∏—Ç: –æ—Ç 501 –¥–æ 1500$\n–ü—Ä–æ—Ü–µ–Ω—Ç —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –∞—Ä–º–∏–∏: 1.5% - –¥–æ 3—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n1.7% - –æ—Ç 3—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n–ü—Ä–æ—Ü–µ–Ω—Ç —Å –º–∞—Ä–∂–∏ –∞—Ä–º–∏–∏: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n–î–Ω–µ–≤–Ω–∞—è –º–∞—Ä–∂–∞: 1,4% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n–•–æ–ª–¥ –¥–µ–ø–æ–∑–∏—Ç–∞: 30 –¥–Ω–µ–π\n–ö–æ–ª-–≤–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤: 3",
        reply_markup=btn_horse_dep)

@dp.message_handler(lambda message: message.text == '–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å Horse')
async def level_MU(message: types.Message):
    await notify_admins_and_supports(message.from_user.id, message.from_user.username, "Horse")
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤—ã –≤ –º–µ–Ω—é", reply_markup=LK_btn)

@dp.message_handler(lambda message: message.text == 'Unicorn')
async def level_unicorn(message: types.Message):
    await message.answer(
        "ü¶Ñ–£—Ä–æ–≤–µ–Ω—å Unicorn\n–î–µ–ø–æ–∑–∏—Ç: –æ—Ç 1501 –¥–æ 5000$\n–ü—Ä–æ—Ü–µ–Ω—Ç —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –∞—Ä–º–∏–∏: 1.7% - –¥–æ 3—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n2% - –æ—Ç 3—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n–ü—Ä–æ—Ü–µ–Ω—Ç —Å –º–∞—Ä–∂–∏ –∞—Ä–º–∏–∏: 5%\n–î–Ω–µ–≤–Ω–∞—è –º–∞—Ä–∂–∞: 1,8% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n–•–æ–ª–¥ –¥–µ–ø–æ–∑–∏—Ç–∞: 25 –¥–Ω–µ–π\n–ö–æ–ª-–≤–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤: 6",
        reply_markup=btn_unicorn_dep)

@dp.message_handler(lambda message: message.text == '–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å Unicorn')
async def level_MU(message: types.Message):
    await notify_admins_and_supports(message.from_user.id, message.from_user.username, "Unicorn")
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤—ã –≤ –º–µ–Ω—é", reply_markup=LK_btn)


@dp.message_handler(lambda message: message.text == 'Magic Unicorn')
async def level_MU(message: types.Message):
    await message.answer(
        "ü¶Ñ–£—Ä–æ–≤–µ–Ω—å Magic Unicorn\n–î–µ–ø–æ–∑–∏—Ç: –æ—Ç 5500$\n–ü—Ä–æ—Ü–µ–Ω—Ç —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –∞—Ä–º–∏–∏: 2.5% - –¥–æ 3—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n4% - –æ—Ç 3—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n–ü—Ä–æ—Ü–µ–Ω—Ç —Å –º–∞—Ä–∂–∏ –∞—Ä–º–∏–∏: 11%\n–î–Ω–µ–≤–Ω–∞—è –º–∞—Ä–∂–∞: 2,1% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n–•–æ–ª–¥ –¥–µ–ø–æ–∑–∏—Ç–∞: 20 –¥–Ω–µ–π\n–ö–æ–ª-–≤–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∞–∫—Ç–∏–≤–æ–≤: 14",
        reply_markup=btn_MU_dep)

@dp.message_handler(lambda message: message.text == '–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å Magic Unicorn')
async def level_MU(message: types.Message):
    await notify_admins_and_supports(message.from_user.id, message.from_user.username, "Magic Unicorn")
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤—ã –≤ –º–µ–Ω—é", reply_markup=LK_btn)

# ===============================================================#
    


@dp.message_handler(lambda message: message.text == '–ê—Ä–º–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
async def take_level_MU(message: types.Message):
    for i in sql.execute(f"SELECT count_refs, unactive_ref FROM users WHERE user_id = {message.from_user.id}"):
        global count
        count = i
    ref_link = f"https://t.me/{bot_name}?start={message.from_user.id}"
    await message.answer(f"üßû–í–∞—à–∞ –∞—Ä–º–∏—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {count[0]} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã {count[1]}, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–Ω–∏ –¥–æ–ª–∂–Ω–∏ —Å–¥–µ–ª–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç.\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å –¥–µ–ø–æ–∑–∏—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 0\nü¶Ñ–í—Ä–µ–º—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∞—Ä–º–∏—é, –ë–æ—Å—Å!\n –¢–≤–æ—è —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞: {ref_link}", reply_markup = LK_btn)


#–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É

async def update_balance_daily():
    users = sql.execute("SELECT user_id, balance, level FROM users").fetchall()
    for user in users:
        user_id = user[0]
        balance = user[1]
        level = user[2]
        print(f"{level} - lvl")
        if level == "Pony":
            interest_rate = 0.0012
        elif level == "Horse":
            interest_rate = 0.0014
        elif level == "Unicorn":
            interest_rate = 0.0018
        elif level == "Magic Unicorn":
            interest_rate = 0.0021
        else:
            interest_rate = 0.0
        daily_interest = balance * interest_rate
        active_referrals_count = sql.execute(f"SELECT count_refs FROM users WHERE user_id = {user_id}").fetchone()[0]
        new_balance = 0.0030 * active_referrals_count + balance + daily_interest
        print(f"0.0030 * {active_referrals_count} + {balance} + {daily_interest}")
        print(new_balance)
        #new_balance = balance + daily_interest + referral_bonus
        sql.execute(f"UPDATE users SET balance = {new_balance} WHERE user_id = {user_id}")
        db.commit()
        await set_user_level(user_id, new_balance)

# ===============================================================#

#–ö–Ω–æ–ø–∫–∞ –±–∞–ª—ñ–∫–∞

@dp.message_handler(lambda message: message.text == '–ë–∞–ª–∞–Ω—Å')
async def take_level_MU(message: types.Message):
    for i in sql.execute(f"SELECT * FROM users WHERE user_id = {message.from_user.id}"):
        balance = i[0]
        balance_message = (f"–ë–∞–ª–∞–Ω—Å: {i[3]}\n–î–µ–ø–æ–∑–∏—Ç: {i[10]}\n–ó–∞—Ä–∞–±–æ—Ç–∞–ª: {int(i[3]) - int(i[10])}\n\n"
            "ü¶Ñ –ü–æ–≤—ã—Å—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏ —Ä–∞—Å—à–∏—Ä—å—Ç–µ –∞—Ä–º–∏—é –¥–ª—è –±–æ–ª—å—à–µ–π –º–∞—Ä–∂–∏"
        )
        await message.answer(balance_message, reply_markup=LK_btn_Balance, parse_mode="Markdown")

#===============================================================#
        
@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥ –≤ –∫–∞–±–∏–Ω–µ—Ç')
async def BTM(message: types.Message):
    user_id = message.from_user.id
    for i in sql.execute(f"SELECT * FROM users WHERE user_id = {user_id}"):
        global column
        column = i
    await message.answer(
        str(f"üè†–ö–∞–±–∏–Ω–µ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ {column[1]}\nID: {column[0]}\nü¶Ñ–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ–º–æ–π, {column[1]}!\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {column[2]}\nüßû –ë–æ—Å—Å, –∑–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:\n –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å\n –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∞—Ä–º–∏—é –í–∞—à–∏—Ö –ï–¥–∏–Ω–æ—Ä–æ–≥–æ–≤"),
        reply_markup=LK_btn)


@dp.message_handler(lambda message: message.text == '–ü–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–≤–Ω—è–º')
async def levels(message: types.Message):
    user_id = message.from_user.id
    for i in sql.execute(f"SELECT * FROM users WHERE user_id = {user_id}"):
        global column
        column = i
    await message.answer(
        f"ü¶Ñ–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {column[2]}",
        reply_markup=level_btn)


@dp.message_handler(lambda message: message.text == '–í—ã–≤–æ–¥')
async def out_MU(message: types.Message):
    keyboard = money_out3
    await message.answer("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–∞–ª–∞–Ω—Å—É : ", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É')
async def take_level_MU(message: types.Message):
    for i in sql.execute(f"SELECT balance FROM users WHERE user_id = {message.from_user.id}"):
        balance = i[0]
        balance_message = (
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: *{balance:.2f}*$\n\n"
            "ü¶Ñ –ü–æ–≤—ã—Å—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏ —Ä–∞—Å—à–∏—Ä—å—Ç–µ –∞—Ä–º–∏—é –¥–ª—è –±–æ–ª—å—à–µ–π –º–∞—Ä–∂–∏"
        )
        await message.answer(balance_message, reply_markup=LK_btn_Balance, parse_mode="Markdown")

def is_withdrawal_period_over(last_deposit_date, withdrawal_days):
    current_date = datetime.datetime.now()
    return (current_date - last_deposit_date).days >= withdrawal_days

@dp.message_handler(lambda message: message.text == '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥', state=None)
async def out_Money(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('–ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É'))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:", reply_markup=keyboard)
    await WithdrawalState.amount.set()


@dp.message_handler(state=WithdrawalState.amount)
async def process_amount(message: types.Message, state: FSMContext):
    user_input = message.text.strip()

    if user_input == '–ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É':
        await state.finish()
        await LK(message)
        return

    if not user_input.isdigit():
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    withdrawal_amount = int(user_input)
    user_id = message.from_user.id

    last_deposit_date_str = sql.execute(f"SELECT deposit_date FROM users WHERE user_id = {user_id}").fetchone()

    if last_deposit_date_str:
        last_deposit_date_str = last_deposit_date_str[0]
        last_deposit_date = datetime.datetime.strptime(last_deposit_date_str, '%Y-%m-%d %H:%M:%S')

        user_level = sql.execute(f"SELECT level FROM users WHERE user_id = {user_id}").fetchone()

        if user_level:
            if user_level[0] == 'Pony':
                withdrawal_days = 40
            elif user_level[0] == 'Horse':
                withdrawal_days = 30
            elif user_level[0] == 'Unicorn':
                withdrawal_days = 25
            elif user_level[0] == 'Magic Unicorn':
                withdrawal_days = 20
            else:
                withdrawal_days = 100

            if is_withdrawal_period_over(last_deposit_date, withdrawal_days):
                balance = sql.execute(f"SELECT balance FROM users WHERE user_id = {user_id}").fetchone()

                if balance and balance[0] >= withdrawal_amount:
                    await message.answer(
                        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞: –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–≤–µ—Å—Ç–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ {withdrawal_days} –¥–Ω—ñ–≤",
                        reply_markup=money_out4)
                    await WithdrawalState.withdrawal_method.set()
                else:
                    await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
            else:
                remaining_days = (last_deposit_date + datetime.timedelta(
                    days=withdrawal_days)) - datetime.datetime.now()
                await message.answer(
                    f"–°—Ä–æ–∫ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª. –ü–æ–ª–Ω—ã–π —Å—Ä–æ–∫: {withdrawal_days} –¥–Ω–µ–π. –û—Å—Ç–∞–ª–æ—Å—å {remaining_days.days} –¥–Ω–µ–π.")
        else:
            await message.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º —É—Ä–æ–≤–Ω–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await message.answer("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    await state.update_data(withdrawal_amount=withdrawal_amount)


@dp.message_handler(lambda message: message.text in ["Crypto Bot", "TRC20"], state=WithdrawalState.withdrawal_method)
async def process_withdrawal_method(message: types.Message, state: FSMContext):
    withdrawal_method = message.text
    data = await state.get_data()
    withdrawal_amount = data.get('withdrawal_amount')
    user_id = message.from_user.id

    admin_message = (
        f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
        f"–°—É–º–º–∞: {withdrawal_amount}$\n"
        f"–°–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞: {withdrawal_method}"
    )

    balance = sql.execute(f"SELECT balance FROM users WHERE user_id = {user_id}").fetchone()[0]

    if balance >= withdrawal_amount:
        new_balance = balance - withdrawal_amount
        sql.execute(f"UPDATE users SET balance = {new_balance} WHERE user_id = {user_id}")
        db.commit()

        admins = sql.execute("SELECT user_id FROM users WHERE is_admin = 1").fetchall()
        supports = sql.execute("SELECT user_id FROM users WHERE is_support = 1").fetchall()
        recipient_ids = [admin[0] for admin in admins] + [support[0] for support in supports]

        for recipient_id in recipient_ids:
            await bot.send_message(chat_id=recipient_id, text=admin_message)

        await bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n"
                                                     "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n"
                                                     "Unicorn Team")
    else:
        await message.answer("–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤.")

    await state.finish()
    await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –≤ –º–µ–Ω—é", reply_markup=LK_btn)

async def set_user_level(user_id, balance):
    if 50 <= balance <= 500:
        new_level = "Pony"
    elif 501 <= balance <= 1500:
        new_level = "Horse"
    elif 1501 <= balance <= 5000:
        new_level = "Unicorn"
    elif 5001 <= balance <= 100000:
        new_level = "Magic Unicorn"
    else:
        new_level = "mini_hourse"

    sql.execute("UPDATE users SET level = ? WHERE user_id = ?", (new_level, user_id))
    db.commit()

async def check_user_levels():
    while True:
        users = sql.execute("SELECT user_id, balance FROM users").fetchall()
        for user in users:
            user_id = user[0]
            balance = user[1]
            await set_user_level(user_id, balance)
            await update_balance_daily()
        await asyncio.sleep(15)# –ß–ê–° –ó–ú–Ü–ù–ò –ë–ê–õ–ê–ù–°–£ #############################################################################################################################################


# –ê–î–ú–ò–ù–û–ß–ö–ê 
        

@dp.message_handler(commands=['activate_admin'], state=None)
async def process_start_command(message: types.Message):
    user_id = message.from_user.id
    for i in sql.execute(f"SELECT is_admin FROM users WHERE user_id = '{user_id}'"):
        global is_admin
        is_admin = i

    if is_admin[0] != 0:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–¥–º–∏–Ω!", reply_markup = admin_btn)
    else:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω!")

@dp.message_handler(commands=['activate_support'], state=None)
async def process_start_command(message: types.Message):
    user_id = message.from_user.id
    for i in sql.execute(f"SELECT is_support FROM users WHERE user_id = '{user_id}'"):
        global is_admin
        is_admin = i

    print(i[0])
    if is_admin[0] != 0:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –°–∞–ø–ø–æ—Ä—Ç!", reply_markup = support_btn)
    else:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω!")

@dp.message_handler(lambda message: message.text == '–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å', state=None)
async def give_balance(message: types.Message):
    try:
        user_id = message.from_user.id
        for i in sql.execute(f"SELECT is_support, is_admin FROM users WHERE user_id = '{user_id}'"):
            print(i)
            if i[0] != 0 or i[1] != 0:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                await GivebalanceState.user_id.set()
            else:
                await message.answer("–≠—Ç–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞!")
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


@dp.message_handler(state=GivebalanceState.user_id)
async def process_give_balance(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['user_id'] = message.text
        await GivebalanceState.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º—É –∫ –±–∞–ª–∞–Ω—Å—É:")
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        await state.finish()


@dp.message_handler(state=GivebalanceState.sum)
async def process_give_balance(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['sum'] = message.text

    async with state.proxy() as data:
        try:
            current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            user_id = data['user_id']
            sum_to_add = int(data['sum'])

            current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            sql.execute(f"UPDATE users SET balance = balance + {sum_to_add}, deposit_date = '{current_time}', deposit = '{sum_to_add}' WHERE user_id = {user_id}")

            deposit_info = sql.execute(f"SELECT deposit FROM users WHERE user_id = {user_id}").fetchone()
            id_refferer = sql.execute(f"SELECT id_refferer FROM users WHERE user_id = {user_id}").fetchone()

            if deposit_info and deposit_info[0] is not None and id_refferer and id_refferer[0] is not None:
                try:
                    sql.execute(f"UPDATE users SET count_refs = count_refs + 1 WHERE user_id = {id_refferer[0]}")
                    sql.execute(f"UPDATE users SET unactive_ref = unactive_ref - 1 WHERE user_id = '{id_refferer[0]}'")
                    db.commit()
                except:
                    await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                    await state.finish()

                await state.finish()
                await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=admin_btn)
        except:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            await state.finish()

@dp.message_handler(lambda message: message.text == '–°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å', state=None)
async def take_balance(message: types.Message):
    user_id = message.from_user.id
    try:
        for i in sql.execute(f"SELECT is_support, is_admin FROM users WHERE user_id = '{user_id}'"):
            print(i)
            if i[0] != 0 or i[1] != 0:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                await TakebalanceState.user_id.set()
            else:
                await message.answer("–≠—Ç–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞!")
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


@dp.message_handler(state=TakebalanceState.user_id)
async def process_take_balance_user_id(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['user_id'] = message.text
        await TakebalanceState.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –∫ –±–∞–ª–∞–Ω—Å—É:")
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        await state.finish()

@dp.message_handler(state=TakebalanceState.sum)
async def process_take_balance_sum(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['sum'] = message.text

        async with state.proxy() as data:
            try:
                current_time1 = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                for i in sql.execute(f"SELECT balance FROM users WHERE user_id = '{data['user_id']}'"):
                    last_sum = int(i[0]) - int(data['sum'])
                    sql.execute(f"UPDATE users SET balance = '{last_sum}', last_withdrawal_date = '{current_time1}' WHERE user_id = '{data['user_id']}'")
                    await state.finish()
                    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup=admin_btn)
            except:
                await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                await state.finish()
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        await state.finish()

@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', state=None)
async def change_balance(message: types.Message):
    try:
        user_id = message.from_user.id
        for i in sql.execute(f"SELECT is_support, is_admin FROM users WHERE user_id = '{user_id}'"):
            print(i)
            if i[0] != 0 or i[1] != 0:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                await ChangebalanceState.user_id.set()
            else:
                await message.answer("–≠—Ç–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞!")
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

@dp.message_handler(state=ChangebalanceState.user_id)
async def process_change_balance(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['user_id'] = message.text
        await ChangebalanceState.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:")
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        await state.finish()

@dp.message_handler(state=ChangebalanceState.sum)
async def process_take_balance(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['sum'] = message.text

        async with state.proxy() as data:
            last_sum = data['sum']
            sql.execute(f"UPDATE users SET balance = '{last_sum}' WHERE user_id = '{data['user_id']}'")
            await state.finish()
            await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup = admin_btn)
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        await state.finish()

@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞', state=None)
async def take_balance(message: types.Message):
    user_id = message.from_user.id
    try:
        for i in sql.execute(f"SELECT is_admin FROM users WHERE user_id = '{user_id}'"):
            print(i)
            if i[0] != 0:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                await MakeadminState.user_id.set()
            else:
                await message.answer("–≠—Ç–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞!")
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        await state.finish()

@dp.message_handler(state=MakeadminState.user_id)
async def process_change_balance(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['user_id'] = message.text

        async with state.proxy() as data:
            sql.execute(f"UPDATE users SET is_support = '1' WHERE user_id = '{data['user_id']}'")
            await state.finish()
            await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup = admin_btn)
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        await state.finish()

@dp.message_handler(lambda message: message.text == '–°–Ω—è—Ç—å —Å–∞–ø–ø–æ—Ä—Ç–∞', state=None)
async def take_balance(message: types.Message):
    try:
        user_id = message.from_user.id
        for i in sql.execute(f"SELECTis_admin FROM users WHERE user_id = '{user_id}'"):
            print(i)
            if i[0] != 0:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                await TakeadminState.user_id.set()
            else:
                await message.answer("–≠—Ç–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞!")
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

@dp.message_handler(state=TakeadminState.user_id)
async def process_change_balance(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['user_id'] = message.text

        async with state.proxy() as data:
            sql.execute(f"UPDATE users SET is_support = '0' WHERE user_id = '{data['user_id']}'")
            await state.finish()
            await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!", reply_markup = admin_btn)
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        await state.finish()


@dp.message_handler(lambda message: message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def take_balance(message: types.Message):
    try:
        user_id = message.from_user.id
        for i in sql.execute(f"SELECT is_admin FROM users WHERE user_id = '{user_id}'"):
            print(i)
            if i[0] != 0:
                users_list = []
                for row in sql.execute(f"SELECT * FROM users"):
                    users_list.append(row)
                users_info = "\n".join([f"ID: {user[0]}, –ò–º—è: {user[1]}, –ë–∞–ª–∞–Ω—Å: {user[2]}" for user in users_list])
                total_users = len(users_list)
                await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{users_info}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–º.")
            else:
                await message.answer("–≠—Ç–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞!")
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

@dp.message_handler(lambda message: message.text.isdigit())
async def get_user_info(message: types.Message):
        user_id = message.from_user.id
        for i in sql.execute(f"SELECT is_admin FROM users WHERE user_id = '{user_id}'"):
            print(i)
            if i[0] != 0:
                user_id = int(message.text)
                user_info = sql.execute(f"SELECT * FROM users WHERE user_id = {user_id}").fetchone()
                if user_info:
                    await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\nID: {user_info[0]}\n–ò–º—è: {user_info[1]}\n–ë–∞–ª–∞–Ω—Å: {user_info[3]}\n–î–µ–ø–æ–∑–∏—Ç: {user_info[10]}\n–ó–∞—Ä–∞–±–æ—Ç–∞–ª: {int(user_info[3]) - int(user_info[10])}")
                else:
                    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await message.answer("–≠—Ç–æ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞!")


#===============================================================#

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(check_user_levels())
    executor.start_polling(dp, skip_updates=True)